#!/bin/bash

if [ "$(uname -s)" = 'Linux' ]; then
  DEFAULT_FURY_HOME="$(realpath $(dirname "$(readlink -f "$0")")/..)"
else
  DEFAULT_FURY_HOME="$(cd "$(dirname "$0")"/.. && pwd -P)"
fi

ARGS="$@"
DEFAULT_PORT="8462"
PORT=${FURY_PORT:-$DEFAULT_PORT}
FHOME=${FURY_HOME:-$DEFAULT_FURY_HOME}
CLASSPATH="$(cat $FHOME/classpath):$FHOME/lib/*"
MAIN="com.facebook.nailgun.NGServer"
FURY_MAIN="fury.Main"
QUIET='0'
UPGRADEDIR="$FHOME/upgrade"
SCALA_VERSION="2.12.8"
NAILGUN_VERSION="1.0.0"

if [ "$XDG_RUNTIME_DIR" = "" ]; then
  SCRIPT_DIR="/tmp/scripts"
else
  SCRIPT_DIR="$XDG_RUNTIME_DIR/scripts"
fi


trap cleanup INT

cleanup() {
  printf "\e[0m"
  printf "\e[?25h"
  silently fury "$$" interrupt
}

nailgun() {
  if ! sh -c "${FHOME}/bin/ng --nailgun-version > /dev/null 2>&1" || [[ "1" -eq "$USE_NG_PY" ]] ; then 
	"${FHOME}"/bin/ng.py --nailgun-port "$PORT" "$1" -- "${@:2}"
  else
	"${FHOME}"/bin/ng --nailgun-port "$PORT" "$1" "${@:2}"
  fi
}

message() {
  if [ "$QUIET" = "0" ]; then
    printf "$1"
  fi
}

silently() {
  #See https://unix.stackexchange.com/a/181938
  #See https://stackoverflow.com/q/3838322
  #See https://www.gnu.org/software/bash/manual/html_node/Command-Grouping.html

  if [ "$DEBUG" = "1" ]; then
    TMPFILE=$(mktemp "/tmp/fury.err.XXXXXX")
    exec 3>"$TMPFILE"
    exec 4<"$TMPFILE"
    rm "$TMPFILE"
    ( $@; ) 2>&3
    EXITCODE=$?
    [[ $EXITCODE -ne 0 ]] && (>&2 cat <&4)
  else
    "$@";
    EXITCODE=$?
  fi
  case $EXITCODE in
    0|1)
      ;;
    91)
      source "${SCRIPT_DIR}/exec_$$"
      rm "${SCRIPT_DIR}/exec_$$"
      ;;
  esac
  exit $EXITCODE
}

coursier() {
  "${FHOME}/bin/coursier" "$@"
}

killFury() {
  case "$1" in
    "--force"|"-F")
      forceKill &
      ;;
    *)
      nailgun ng-stop 2> /dev/null && message 'Fury daemon has shut down\n'
      ;;
  esac
}

forceKill() {
  BLPORT="8212" 
  bash <<END
    printf "Killing processes that listen on ports $PORT and $BLPORT\n"
    lsof -i :"$PORT" -i :"$BLPORT" -t | xargs kill
    printf 'Killing everything that looks like fury or bloop...'
    pkill -9 -f '(fury)|(bloop)'
    pgrep -f '(fury)|(bloop)' && printf '\nProcesses with these PIDs have survived.\n' || printf 'done\n'
END
}

stopFury() {
  nailgun "${FURY_MAIN}" "$$" "stop" && killFury
}

alive() {
  bash -c "(exec 6<> /dev/tcp/127.0.0.1/${PORT})" > /dev/null 2> /dev/null
}

startNailgun() {
  if [ -d "${UPGRADEDIR}" ]; then
    source "${UPGRADEDIR}/bin/upgrade" && ${FHOME}/bin/fury "$ARGS"
    exit $?
  else
    if [ "$1" = "prompt" ]; then
      message 'Starting Fury daemon...'
    fi
    java -Dfury.home="${FHOME}" -cp "$CLASSPATH" "$MAIN" "$PORT" > /dev/null &
    until (alive); do
      if [ "$1" = "prompt" ]; then
        message '.'
      fi
      sleep 0.1
    done
    if [ "$1" = "prompt" ]; then
      message 'done\n'
    fi
  fi
}

ngServer() {
  alive || startNailgun
}

fury() {
  ngServer && nailgun "${FURY_MAIN}" "$$" "$@"
}

restartFury() {
  stopFury && ngServer
}

startFuryStandalone() {
  java -Dfury.home="${FHOME}" -cp "$CLASSPATH" "$FURY_MAIN" "$$" "$@"
}

case "$1" in
  "start")
    silently ngServer
    ;;
  "standalone")
    startFuryStandalone "${@:2}"
    ;;
  "kill")
    silently killFury "${@:2}"
    ;;
  "stop")
    silently stopFury
    ;;
  "upgrade")
    silently fury "$@"
    silently killFury
    ;;
  "restart")
    silently restartFury
    ;;
  "prompt")
    silently fury "$@" || printf " %{\e[0;30m%}[ ]"
    ;;
  "completion")
    QUIET=1
    silently fury "$@" || printf "1:Command:((start:'start the Fury daemon'))\n"
    ;;
  "--help")
    silently fury "help"
    ;;
  *)
    silently fury "$@"
    res=$?
    cleanup
    exit $res
    ;;
esac

