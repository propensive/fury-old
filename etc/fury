#!/bin/bash

if [ "$(uname -s)" = 'Linux' ]; then
  FURYHOME="$(dirname "$(readlink -f "$0")")/.."
else
  FURYHOME="$(cd "$(dirname "$0")"/.. && pwd -P)"
fi

PORT="8462"
CLASSPATH="$FURYHOME/lib/*"
MAIN="com.facebook.nailgun.NGServer"
FURY_MAIN="fury.Main"
QUIET='0'
PIDFILE="$FURYHOME/ngserver.pid"
NG_PID=""

trap cleanup INT

cleanup() {
  printf "\e[0m"
  printf "\e[?25h"
}

nailgun() {
  if ! sh -c "${FURYHOME}/bin/ng --nailgun-version > /dev/null 2>&1" || [[ "1" -eq "$USE_NG_PY" ]] ; then 
	"${FURYHOME}"/bin/ng.py --nailgun-port "$PORT" "$1" -- "${@:2}"
  else
	"${FURYHOME}"/bin/ng --nailgun-port "$PORT" "$1" "${@:2}"
  fi
}

message() {
  if [ "$QUIET" = "0" ]; then
    printf "$1"
  fi
}

silently() {
  #See https://unix.stackexchange.com/a/181938
  #See https://stackoverflow.com/q/3838322
  #See https://www.gnu.org/software/bash/manual/html_node/Command-Grouping.html

  if [ "$DEBUG" = "1" ]; then
    TMPFILE=$(mktemp "/tmp/fury.err.XXXXXX")
    exec 3>"$TMPFILE"
    exec 4<"$TMPFILE"
    rm "$TMPFILE"
    ( $@; ) 2>&3
    EXITCODE=$?
    [[ $EXITCODE -ne 0 ]] && (>&2 cat <&4)
    exit $EXITCODE
  else
    $@;
    exit $?
  fi
}

coursier() {
  "${FURYHOME}/bin/coursier" "$@"
}

killFury() {
  case "$1" in
    "--force"|"-F")
      forceKill &
      ;;
    *)
      nailgun ng-stop 2> /dev/null && message 'Fury daemon has shut down\n'
      ;;
  esac
}

forceKill() {
  bash <<END
    printf 'Killing everything that looks like fury or bloop...'
    pkill --signal SIGKILL -f '(fury)|(bloop)'
    pgrep -f '(fury)|(bloop)' && printf '\nProcesses with these PIDs have survived.\n' || printf 'done\n'
END
}

stopFury() {
  nailgun "${FURY_MAIN}" "stop" && killFury
}

ngServer() {
  if [ -f "$PIDFILE" ]; then
    NG_PID=$(< "$PIDFILE")
  fi
  if [ -z "$NG_PID" ] || [ ! -e "/proc/$NG_PID" ]; then
    message 'Starting Nailgun server... '
    SCALA=$(coursier fetch --classpath org.scala-lang:scala-reflect:2.12.8 com.facebook:nailgun-server:1.0.0)
    java -Dfury.home="${FURYHOME}" -cp "$SCALA:$CLASSPATH" "$MAIN" "$PORT" &
    NG_PID=$!
    echo $NG_PID > $PIDFILE
    until (exec 6<>/dev/tcp/127.0.0.1/${PORT} > /dev/null 2> /dev/null); do
      message '.'
      sleep 0.15
    done
    message "Started Nailgun server at PID $NG_PID\n"
  fi
}

fury() {
  ngServer && nailgun "${FURY_MAIN}" "$@"
}

restartFury() {
  stopFury && ngServer
}

startFuryStandalone() {
  SCALA=$(coursier fetch --classpath org.scala-lang:scala-reflect:2.12.8)
  java -Dfury.home="${FURYHOME}" -cp "$SCALA:$CLASSPATH" "$FURY_MAIN" "$@"
}

case "$1" in
  "start")
    silently ngServer
    ;;
  "standalone")
    startFuryStandalone "${@:2}"
    ;;
  "kill")
    silently killFury "${@:2}"
    ;;
  "stop")
    silently stopFury
    ;;
  "restart")
    silently restartFury
    ;;
  "prompt")
    silently fury "$@" || printf " %{\e[0;30m%}[ ]"
    ;;
  "completion")
    QUIET=1
    silently fury "$@" || printf "1:Command:((start:'start the Fury daemon'))\n"
    ;;
  "--help")
    silently fury "help"
    ;;
  *)
    silently fury "$@"
    res=$?
    cleanup
    exit $res
    ;;
esac

